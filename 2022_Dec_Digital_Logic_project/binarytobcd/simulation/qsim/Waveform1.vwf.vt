// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/11/2023 21:41:59"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    binarytobcd
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module binarytobcd_vlg_sample_tst(
	binary_value,
	clk,
	sampler_tx
);
input [7:0] binary_value;
input  clk;
output sampler_tx;

reg sample;
time current_time;
always @(binary_value or clk)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module binarytobcd_vlg_check_tst (
	hundred,
	one,
	ten,
	sampler_rx
);
input [3:0] hundred;
input [3:0] one;
input [3:0] ten;
input sampler_rx;

reg [3:0] hundred_expected;
reg [3:0] one_expected;
reg [3:0] ten_expected;

reg [3:0] hundred_prev;
reg [3:0] one_prev;
reg [3:0] ten_prev;

reg [3:0] hundred_expected_prev;
reg [3:0] one_expected_prev;
reg [3:0] ten_expected_prev;

reg [3:0] last_hundred_exp;
reg [3:0] last_one_exp;
reg [3:0] last_ten_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	hundred_prev = hundred;
	one_prev = one;
	ten_prev = ten;
end

// update expected /o prevs

always @(trigger)
begin
	hundred_expected_prev = hundred_expected;
	one_expected_prev = one_expected;
	ten_expected_prev = ten_expected;
end


// expected hundred[ 3 ]
initial
begin
	hundred_expected[3] = 1'bX;
end 
// expected hundred[ 2 ]
initial
begin
	hundred_expected[2] = 1'bX;
end 
// expected hundred[ 1 ]
initial
begin
	hundred_expected[1] = 1'bX;
end 
// expected hundred[ 0 ]
initial
begin
	hundred_expected[0] = 1'bX;
end 
// expected ten[ 3 ]
initial
begin
	ten_expected[3] = 1'bX;
end 
// expected ten[ 2 ]
initial
begin
	ten_expected[2] = 1'bX;
end 
// expected ten[ 1 ]
initial
begin
	ten_expected[1] = 1'bX;
end 
// expected ten[ 0 ]
initial
begin
	ten_expected[0] = 1'bX;
end 
// expected one[ 3 ]
initial
begin
	one_expected[3] = 1'bX;
end 
// expected one[ 2 ]
initial
begin
	one_expected[2] = 1'bX;
end 
// expected one[ 1 ]
initial
begin
	one_expected[1] = 1'bX;
end 
// expected one[ 0 ]
initial
begin
	one_expected[0] = 1'bX;
end 
// generate trigger
always @(hundred_expected or hundred or one_expected or one or ten_expected or ten)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected hundred = %b | expected one = %b | expected ten = %b | ",hundred_expected_prev,one_expected_prev,ten_expected_prev);
	$display("| real hundred = %b | real one = %b | real ten = %b | ",hundred_prev,one_prev,ten_prev);
`endif
	if (
		( hundred_expected_prev[0] !== 1'bx ) && ( hundred_prev[0] !== hundred_expected_prev[0] )
		&& ((hundred_expected_prev[0] !== last_hundred_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hundred[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hundred_expected_prev);
		$display ("     Real value = %b", hundred_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_hundred_exp[0] = hundred_expected_prev[0];
	end
	if (
		( hundred_expected_prev[1] !== 1'bx ) && ( hundred_prev[1] !== hundred_expected_prev[1] )
		&& ((hundred_expected_prev[1] !== last_hundred_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hundred[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hundred_expected_prev);
		$display ("     Real value = %b", hundred_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_hundred_exp[1] = hundred_expected_prev[1];
	end
	if (
		( hundred_expected_prev[2] !== 1'bx ) && ( hundred_prev[2] !== hundred_expected_prev[2] )
		&& ((hundred_expected_prev[2] !== last_hundred_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hundred[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hundred_expected_prev);
		$display ("     Real value = %b", hundred_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_hundred_exp[2] = hundred_expected_prev[2];
	end
	if (
		( hundred_expected_prev[3] !== 1'bx ) && ( hundred_prev[3] !== hundred_expected_prev[3] )
		&& ((hundred_expected_prev[3] !== last_hundred_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hundred[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hundred_expected_prev);
		$display ("     Real value = %b", hundred_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_hundred_exp[3] = hundred_expected_prev[3];
	end
	if (
		( one_expected_prev[0] !== 1'bx ) && ( one_prev[0] !== one_expected_prev[0] )
		&& ((one_expected_prev[0] !== last_one_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port one[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", one_expected_prev);
		$display ("     Real value = %b", one_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_one_exp[0] = one_expected_prev[0];
	end
	if (
		( one_expected_prev[1] !== 1'bx ) && ( one_prev[1] !== one_expected_prev[1] )
		&& ((one_expected_prev[1] !== last_one_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port one[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", one_expected_prev);
		$display ("     Real value = %b", one_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_one_exp[1] = one_expected_prev[1];
	end
	if (
		( one_expected_prev[2] !== 1'bx ) && ( one_prev[2] !== one_expected_prev[2] )
		&& ((one_expected_prev[2] !== last_one_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port one[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", one_expected_prev);
		$display ("     Real value = %b", one_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_one_exp[2] = one_expected_prev[2];
	end
	if (
		( one_expected_prev[3] !== 1'bx ) && ( one_prev[3] !== one_expected_prev[3] )
		&& ((one_expected_prev[3] !== last_one_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port one[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", one_expected_prev);
		$display ("     Real value = %b", one_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_one_exp[3] = one_expected_prev[3];
	end
	if (
		( ten_expected_prev[0] !== 1'bx ) && ( ten_prev[0] !== ten_expected_prev[0] )
		&& ((ten_expected_prev[0] !== last_ten_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ten[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ten_expected_prev);
		$display ("     Real value = %b", ten_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ten_exp[0] = ten_expected_prev[0];
	end
	if (
		( ten_expected_prev[1] !== 1'bx ) && ( ten_prev[1] !== ten_expected_prev[1] )
		&& ((ten_expected_prev[1] !== last_ten_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ten[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ten_expected_prev);
		$display ("     Real value = %b", ten_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ten_exp[1] = ten_expected_prev[1];
	end
	if (
		( ten_expected_prev[2] !== 1'bx ) && ( ten_prev[2] !== ten_expected_prev[2] )
		&& ((ten_expected_prev[2] !== last_ten_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ten[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ten_expected_prev);
		$display ("     Real value = %b", ten_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ten_exp[2] = ten_expected_prev[2];
	end
	if (
		( ten_expected_prev[3] !== 1'bx ) && ( ten_prev[3] !== ten_expected_prev[3] )
		&& ((ten_expected_prev[3] !== last_ten_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ten[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ten_expected_prev);
		$display ("     Real value = %b", ten_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ten_exp[3] = ten_expected_prev[3];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module binarytobcd_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] binary_value;
reg clk;
// wires                                               
wire [3:0] hundred;
wire [3:0] one;
wire [3:0] ten;

wire sampler;                             

// assign statements (if any)                          
binarytobcd i1 (
// port map - connection between master ports and signals/registers   
	.binary_value(binary_value),
	.clk(clk),
	.hundred(hundred),
	.one(one),
	.ten(ten)
);
// binary_value[ 7 ]
initial
begin
	binary_value[7] = 1'b1;
end 
// binary_value[ 6 ]
initial
begin
	binary_value[6] = 1'b1;
end 
// binary_value[ 5 ]
initial
begin
	binary_value[5] = 1'b1;
end 
// binary_value[ 4 ]
initial
begin
	binary_value[4] = 1'b1;
end 
// binary_value[ 3 ]
initial
begin
	binary_value[3] = 1'b0;
end 
// binary_value[ 2 ]
initial
begin
	binary_value[2] = 1'b1;
end 
// binary_value[ 1 ]
initial
begin
	binary_value[1] = 1'b1;
end 
// binary_value[ 0 ]
initial
begin
	binary_value[0] = 1'b0;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 

binarytobcd_vlg_sample_tst tb_sample (
	.binary_value(binary_value),
	.clk(clk),
	.sampler_tx(sampler)
);

binarytobcd_vlg_check_tst tb_out(
	.hundred(hundred),
	.one(one),
	.ten(ten),
	.sampler_rx(sampler)
);
endmodule

