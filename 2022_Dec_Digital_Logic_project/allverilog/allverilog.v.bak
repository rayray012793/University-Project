module allverilog(
input clk,
input [7:0] binary_value,
input [3:0] bcd_in1,
input [3:0] bcd_in2,
input [3:0] bcd_in3,
output reg [3:0] one = 0,
output reg [3:0] ten = 0,
output reg [3:0] hundred = 0
output reg [6:0] seg_out1
output reg [6:0] seg_out2
output reg [6:0] seg_out3
);

reg [3:0] i=0;
reg [19:0] shift = 0;
reg [3:0] temp_one =0;
reg [3:0] temp_ten =0;
reg [3:0] temp_hundred =0;
reg [7:0] old_binary_value = 0;

always@(posedge clk) 
begin
   if (i==0 & old_binary_value != binary_value)
	   begin
		shift = 20'd0;
		old_binary_value = binary_value;
		shift[7:0] = binary_value;
		temp_hundred = shift[19:16];
		temp_ten = shift[15:12];
		temp_one = shift[11:8];
		i = i + 1;
		end
	if(i < 9 & i > 0)
      begin
	   	if(temp_hundred >= 5)
			temp_hundred = temp_hundred + 3;
			if(temp_ten >= 5)
			temp_ten = temp_ten + 3;
			if(temp_one >= 5)
			temp_one = temp_one + 3;
			shift [19:8] = {temp_hundred , temp_ten , temp_one};
			shift = shift << 1;
	      temp_hundred = shift[19:16];
		   temp_ten = shift[15:12];
		   temp_one = shift[11:8];
		   i = i + 1;
			end
	 if(i == 9)
	    begin
		 i = 0;
		 hundred = temp_hundred;
		 ten = temp_ten;
		 one = temp_one;
		 end
end
always @* begin
  case(bcd_in1)
    4'b0000: seg_out1 = 7'b1000000; // 0
    4'b0001: seg_out1 = 7'b1111001; // 1
    4'b0010: seg_out1 = 7'b0100100; // 2
    4'b0011: seg_out1 = 7'b0110000; // 3
    4'b0100: seg_out1 = 7'b0011001; // 4
    4'b0101: seg_out1 = 7'b0010010; // 5
    4'b0110: seg_out1 = 7'b0000010; // 6
    4'b0111: seg_out1 = 7'b1111000; // 7
    4'b1000: seg_out1 = 7'b0000000; // 8
    4'b1001: seg_out1 = 7'b0010000; // 9
    default: seg_out1 = 7'b1111111; // invalid input
  endcase
end
	 
endmodule